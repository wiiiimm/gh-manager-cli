name: Automated Release Workflow

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # Job: Build binaries for multiple platforms
  build:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            ext: ''
          - os: macos-latest
            platform: macos
            arch: x64
            ext: ''
          - os: windows-latest
            platform: windows
            arch: x64
            ext: '.exe'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Install pkg globally
        run: npm install -g pkg

      - name: Create binary
        run: pkg dist/index.js --targets node18-${{ matrix.platform }}-${{ matrix.arch }} --output gh-manager-cli-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gh-manager-cli-${{ matrix.platform }}-${{ matrix.arch }}
          path: gh-manager-cli-${{ matrix.platform }}-${{ matrix.arch }}${{ matrix.ext }}
          retention-days: 90

  # Job: Create automated release using semantic-release
  create-release:
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./binaries

      - name: Display downloaded artifacts
        run: |
          ls -la ./binaries/
          find ./binaries -type f -exec ls -la {} \;

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Capture the version before semantic-release
          VERSION_BEFORE=$(node -p "require('./package.json').version")
          echo "VERSION_BEFORE=${VERSION_BEFORE}" >> $GITHUB_ENV
          
          # Run semantic-release
          npx semantic-release
          
          # Capture the version after semantic-release
          VERSION_AFTER=$(node -p "require('./package.json').version")
          echo "VERSION_AFTER=${VERSION_AFTER}" >> $GITHUB_ENV
          
          # Check if version changed
          if [ "$VERSION_BEFORE" != "$VERSION_AFTER" ]; then
            echo "NEW_VERSION_CREATED=true" >> $GITHUB_ENV
            echo "Version bumped from ${VERSION_BEFORE} to ${VERSION_AFTER}"
          else
            echo "NEW_VERSION_CREATED=false" >> $GITHUB_ENV
            echo "No version bump occurred (still at ${VERSION_BEFORE})"
          fi

      - name: Publish to GitHub Packages
        if: env.NEW_VERSION_CREATED == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Publishing version ${{ env.VERSION_AFTER }} to GitHub Packages..."
          
          # Create .npmrc for GitHub Packages
          echo "@wiiiimm:registry=https://npm.pkg.github.com" >> .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> .npmrc
          
          # Check if this version already exists in GitHub Packages
          if npm view @wiiiimm/gh-manager-cli@${{ env.VERSION_AFTER }} --registry=https://npm.pkg.github.com 2>/dev/null; then
            echo "Version ${{ env.VERSION_AFTER }} already exists in GitHub Packages, skipping publish"
            exit 0
          fi
          
          # Backup original package.json
          cp package.json package-original.json
          
          # Modify package.json for GitHub Packages
          jq '.name = "@wiiiimm/gh-manager-cli" | .publishConfig = {"registry": "https://npm.pkg.github.com"}' package-original.json > package.json
          
          # Publish to GitHub Packages
          npm publish --registry=https://npm.pkg.github.com
          
          # Restore original package.json
          mv package-original.json package.json

      - name: Update Homebrew Tap
        if: env.NEW_VERSION_CREATED == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "Updating Homebrew tap for version ${{ env.VERSION_AFTER }}..."
          
          # Create npm tarball locally
          npm pack
          TARBALL="gh-manager-cli-${{ env.VERSION_AFTER }}.tgz"
          
          # Calculate SHA256 of the tarball
          if [[ "$OSTYPE" == "darwin"* ]]; then
            SHA256=$(shasum -a 256 "$TARBALL" | cut -d' ' -f1)
          else
            SHA256=$(sha256sum "$TARBALL" | cut -d' ' -f1)
          fi
          echo "SHA256: $SHA256"
          
          # Clone the tap repository with authentication
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git clone https://x-access-token:${GITHUB_TOKEN}@github.com/wiiiimm/homebrew-tap.git tap-repo
          
          # Update the formula
          FORMULA="tap-repo/Formula/gh-manager-cli.rb"
          sed -i.bak -E "s|url \"https://registry.npmjs.org/gh-manager-cli/-/gh-manager-cli-[0-9.]+\.tgz\"|url \"https://registry.npmjs.org/gh-manager-cli/-/gh-manager-cli-${{ env.VERSION_AFTER }}.tgz\"|" "$FORMULA"
          sed -i.bak -E "s|sha256 \"[a-f0-9]{64}\"|sha256 \"${SHA256}\"|" "$FORMULA"
          rm -f "$FORMULA.bak"
          
          # Commit and push
          cd tap-repo
          git add Formula/gh-manager-cli.rb
          git commit -m "Update gh-manager-cli to ${{ env.VERSION_AFTER }}"
          git push origin main